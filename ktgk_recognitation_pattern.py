# -*- coding: utf-8 -*-
"""KTGK_recognitation_pattern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JSZiT-cyP_uVa9MSy5qEIKKCwJVywttW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings(action='ignore', category=FutureWarning)
from scipy import fft, stats

from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/NLP/Amazon_Unlocked_Mobile.csv'
df = pd.read_csv(file_path, nrows=1000)

df.head(5)

print(df.columns)

!pip install -q transformers datasets

# 1. Kiểm tra số lượng NaN theo từng cột
nan_counts = df.isna().sum()
print("Số lượng giá trị NaN theo cột:")
print(nan_counts)

# Loại bỏ dòng thiếu giá trị
df.dropna(subset=['Reviews', 'Rating'], inplace=True)

# Gán nhãn cảm xúc: 2 (positive), 1 (neutral), 0 (negative)
def label_sentiment(r):
    if r >= 4:
        return 2
    elif r == 3:
        return 1
    else:
        return 0

df["label"] = df["Rating"].apply(label_sentiment)

# Đổi tên cột Reviews → text
df = df.rename(columns={"Reviews": "text"})
df = df[["text", "label"]]

from datasets import Dataset

dataset = Dataset.from_pandas(df)
dataset = dataset.train_test_split(test_size=0.2)

import transformers
print(transformers.__version__)

from datasets import Dataset

dataset = Dataset.from_pandas(df)
dataset = dataset.train_test_split(test_size=0.2)

from sklearn.model_selection import train_test_split
from datasets import Dataset
from transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification, TrainingArguments, Trainer

# Tách train/test
train_texts, val_texts, train_labels, val_labels = train_test_split(df['text'], df['label'], test_size=0.2)

# Tokenizer
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')
train_encodings = tokenizer(list(train_texts), truncation=True, padding=True)
val_encodings = tokenizer(list(val_texts), truncation=True, padding=True)

# Chuyển về Dataset
train_dataset = Dataset.from_dict({**train_encodings, 'labels': list(train_labels)})
val_dataset = Dataset.from_dict({**val_encodings, 'labels': list(val_labels)})

# Tải mô hình
model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased', num_labels=3)

from transformers import TrainingArguments, Trainer
import os

# Tắt hoàn toàn wandb
os.environ["WANDB_DISABLED"] = "true"

training_args = TrainingArguments(
    output_dir='./results',
    eval_strategy="epoch",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    report_to=None  # KHÔNG log lên wandb hay tensorboard
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
)

trainer.train()

from sklearn.metrics import classification_report, confusion_matrix
import numpy as np

predictions = trainer.predict(val_dataset)
y_true = predictions.label_ids
y_pred = np.argmax(predictions.predictions, axis=1)

print(classification_report(
    y_true, y_pred,
    labels=[0, 1, 2],
    target_names=["Negative", "Neutral", "Positive"]
))

print(confusion_matrix(y_true, y_pred, labels=[0, 1, 2]))

import torch

# Kiểm tra thiết bị model đang dùng
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

sample = "It's battery life is great. It's very responsive to touch. The only issue is that sometimes the screen goes black and you have to press the top button several times to get the screen to re-illuminate. "
inputs = tokenizer(sample, return_tensors="pt", truncation=True, padding=True).to(device)  # Đưa input lên GPU/CPU

with torch.no_grad():
    outputs = model(**inputs)
    pred = outputs.logits.argmax(dim=1).item()

print(["Negative", "Neutral", "Positive"][pred])